{"version":3,"sources":["components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Row","props","children","Board","boardData","onClickCell","handleClick","target","targetId","parseInt","id","cellClick","useEffect","gameWon","checkWin","index","player","row","WINNING_NUMBERS","endGame","forEach","cell","document","getElementsByTagName","style","backgroundColor","gameOver","computerRandomMove","tableRows","map","i","onClick","isClicked","value","disabled","App","useState","setBoardData","isAiTurn","selectedCell","changeTurn","setChangeTurn","availableSquare","reduce","acc","concat","filter","handleClickCell","newValue","length","updateBoardData","prev","selectedCells","a","c","entries","every","elem","indexOf","message","querySelector","display","innerText","availableCells","randomMove","Math","floor","random","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01519618.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nfunction Row(props) {\r\n  return <tr>{props.children}</tr>;\r\n}\r\n\r\nexport default function Board(props) {\r\n  const { boardData, onClickCell } = props;\r\n  const humanPlayer = \"O\";\r\n\r\n  const handleClick = ({ target }) => {\r\n    const targetId = parseInt(target.id);\r\n    if (typeof targetId === \"number\") {\r\n      onClickCell(targetId, humanPlayer);\r\n    }\r\n  };\r\n  const cellClick = () => null;\r\n\r\n  useEffect(() => {\r\n    //check if last player move was a win\r\n    const gameWon = props.checkWin();\r\n    if (gameWon) {\r\n      const gameOver = (gameWon) => {\r\n        const { index, player } = gameWon;\r\n        const row = props.WINNING_NUMBERS[index];\r\n        props.endGame(null, player);\r\n        row.forEach((cell) => {\r\n          document.getElementsByTagName(\"td\")[cell].style.backgroundColor =\r\n            \"skyblue\";\r\n        });\r\n      };\r\n      gameOver(gameWon);\r\n    } else {\r\n      props.computerRandomMove();\r\n    }\r\n  }, [props]);\r\n\r\n  const tableRows = boardData.map((row, i) => (\r\n    <Row key={i}>\r\n      {row.map((cell) => (\r\n        <td\r\n          key={cell.id}\r\n          id={cell.id}\r\n          onClick={cell.isClicked ? cellClick : handleClick}\r\n        >\r\n          {cell.value}\r\n        </td>\r\n      ))}\r\n    </Row>\r\n  ));\r\n\r\n  return (\r\n    <table disabled={true}>\r\n      <tbody>{tableRows}</tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\n\nfunction App(props) {\n  const { WINNING_NUMBERS } = props;\n  const [boardData, setBoardData] = useState(props.boardData);\n  const [changeTurn, setChangeTurn] = useState({\n    isAiTurn: false,\n    player: \"O\",\n    selectedCell: null,\n  });\n\n  const availableSquare = () => {\n    const emptyCells = boardData.reduce(\n      (acc, row) =>\n        acc.concat(\n          row.filter((cell) => cell.isClicked === false).map((cell) => cell.id)\n        ),\n      []\n    );\n    return emptyCells;\n  };\n\n  const isAvailableSquare = () => {\n    const emptyCells = availableSquare();\n    if (emptyCells.length) {\n      return true;\n    }\n    return false;\n  };\n\n  const handleClickCell = (id, newValue) => {\n    if (!checkWin() && isAvailableSquare()) {\n      const updateBoardData = boardData.map((row) => {\n        return row.map((cell) => {\n          if (cell.id === id && !cell.isClicked) {\n            return {\n              ...cell,\n              value: newValue,\n              isClicked: !cell.isClicked,\n            };\n          }\n          return cell;\n        });\n      });\n      setChangeTurn((prev) => ({\n        ...prev,\n        isAiTurn: !changeTurn.isAiTurn,\n        player: newValue,\n        selectedCell: id,\n      }));\n      setBoardData(updateBoardData);\n    } else {\n      //end the game if there was no winner\n      endGame(null, null);\n    }\n  };\n\n  const checkWin = () => {\n    let gameWon = null;\n    const player = changeTurn.player;\n    const selectedCells = boardData.reduce(\n      (a, c) =>\n        a.concat(\n          c.filter((cell) => cell.value === player).map((cell) => cell.id)\n        ),\n      []\n    );\n    for (let [index, win] of WINNING_NUMBERS.entries()) {\n      if (win.every((elem) => selectedCells.indexOf(elem) > -1)) {\n        gameWon = { index, player };\n        break;\n      }\n    }\n    return gameWon;\n  };\n\n  const computerRandomMove = () => {\n    if (changeTurn.isAiTurn) {\n      const availableCells = availableSquare();\n      const randomMove = Math.floor(Math.random() * availableCells.length);\n      const aiPlayer = \"X\";\n      handleClickCell(availableCells[randomMove], aiPlayer);\n    }\n    return null;\n  };\n\n  const endGame = (message, player) => {\n    if (player === \"O\") {\n      message = \"Hurray! You Won\";\n    } else if (!player) {\n      message = \"Game Tie!\";\n      [...document.getElementsByTagName(\"td\")].forEach(\n        (a) => (a.style.backgroundColor = \"steelblue\")\n      );\n    } else {\n      message = \"Oops! You loose\";\n    }\n    document.querySelector(\".endgame\").style.display = \"block\";\n    document.querySelector(\".endgame .text\").innerText = message;\n  };\n\n  return (\n    <section>\n      <Board\n        boardData={boardData}\n        onClickCell={handleClickCell}\n        WINNING_NUMBERS={WINNING_NUMBERS}\n        checkWin={checkWin}\n        computerRandomMove={computerRandomMove}\n        endGame={endGame}\n      />\n      <div className=\"endgame\">\n        <div className=\"text\"></div>\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nconst boardData = [\n  [\n    { id: 0, value: null, isClicked: false },\n    { id: 1, value: null, isClicked: false },\n    { id: 2, value: null, isClicked: false },\n  ],\n  [\n    { id: 3, value: null, isClicked: false },\n    { id: 4, value: null, isClicked: false },\n    { id: 5, value: null, isClicked: false },\n  ],\n  [\n    { id: 6, value: null, isClicked: false },\n    { id: 7, value: null, isClicked: false },\n    { id: 8, value: null, isClicked: false },\n  ],\n];\nconst WINNING_NUMBERS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\nReactDOM.render(\n  <React.StrictMode>\n    <App boardData={boardData} WINNING_NUMBERS={WINNING_NUMBERS} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}